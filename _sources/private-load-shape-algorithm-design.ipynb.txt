{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Private Load Shape Algorithm Design #"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "mpl.style.use(\"ggplot\")\n",
        "plt.rcParams['figure.figsize'] = [15, 5]"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2020-08-11T00:46:15.319Z",
          "iopub.execute_input": "2020-08-11T00:46:15.322Z",
          "iopub.status.idle": "2020-08-11T00:46:15.603Z",
          "shell.execute_reply": "2020-08-11T00:46:15.597Z"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Approaches Considered ##\n",
        "\n",
        "For a given ε, noise is drawn from the Laplace distribution at `b`=`sensitivity`/ε.\n",
        "\n",
        "For a counting query, `sensitivity`=1.\n",
        "\n",
        "For private sums, `sensitivity` is the difference between the largest and smallest possible values in the dataset.\n",
        "\n",
        "For private means, divide the sensitivity of a private sum by the number of elements in the dataset."
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "epsilon = 0.01\n",
        "\n",
        "sensitivity = 1\n",
        "b = sensitivity / epsilon\n",
        "\n",
        "noise = np.random.laplace(0, b, 10000)\n",
        "plt.hist(noise, bins=30)\n",
        "plt.title(\"Distribution of outputs from Laplace Mechanism\")\n",
        "plt.show()\n",
        "\n",
        "print(\"90% Confidence interval\", np.quantile(noise, 0.95))"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1080x360 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "90% Confidence interval 227.4592150509199\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "execution": {
          "iopub.status.busy": "2020-08-11T00:46:15.607Z",
          "iopub.execute_input": "2020-08-11T00:46:15.611Z",
          "iopub.status.idle": "2020-08-11T00:46:15.905Z",
          "shell.execute_reply": "2020-08-11T00:46:15.922Z"
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Accuracy/Privacy Trade-Off of Approaches ##"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.7.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernelspec": {
      "argv": [
        "/usr/local/opt/python/bin/python3.7",
        "-m",
        "ipykernel_launcher",
        "-f",
        "{connection_file}"
      ],
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "nteract": {
      "version": "0.24.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}